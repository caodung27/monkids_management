name: Backend CI/CD Workflow

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          script: |
            set -e  # Exit on any error
            
            echo "Starting deployment..."
            WORKSPACE_DIR=/home/${{ secrets.EC2_USERNAME }}/monkids_management
            BACKUP_BASE_DIR=~/backups
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR=${BACKUP_BASE_DIR}/backup_${TIMESTAMP}
            
            # Create backup directory structure
            mkdir -p $BACKUP_DIR/{env,data,docker}
            
            # Backup existing configuration and data
            echo "Creating backup..."
            if [ -d "$WORKSPACE_DIR" ]; then
              # Backup environment files
              find $WORKSPACE_DIR -name '.env*' -exec cp --parents {} $BACKUP_DIR/env/ \;
              
              # Backup docker volumes (if any)
              if [ -d "$WORKSPACE_DIR/backend/data" ]; then
                cp -r $WORKSPACE_DIR/backend/data $BACKUP_DIR/data/
              fi
              
              # Export running containers config
              cd $WORKSPACE_DIR/backend
              docker-compose config > $BACKUP_DIR/docker/docker-compose.yml 2>/dev/null || true
            fi
            
            # Setup or update workspace
            if [ ! -d "$WORKSPACE_DIR" ]; then
              git clone --depth 1 --single-branch --branch main https://github.com/caodung27/monkids_management.git $WORKSPACE_DIR
            fi
            cd $WORKSPACE_DIR
            
            # Optimize git operations
            git fetch --prune --quiet
            git reset --hard origin/main
            
            cd backend
            
            # Restore .env from backup if it doesn't exist
            if [ ! -f ".env" ] && [ -f "$BACKUP_DIR/env/backend/.env" ]; then
              echo "Restoring .env from backup..."
              cp "$BACKUP_DIR/env/backend/.env" .
            fi
            
            # Ensure .env exists
            if [ ! -f ".env" ]; then
              echo "Error: .env file not found!"
              exit 1
            fi
            
            # Add Docker Hub credentials to .env if not present
            if ! grep -q "DOCKERHUB_USERNAME" .env; then
              echo "Adding Docker Hub credentials to .env..."
              echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" >> .env
            fi
            
            # Login to Docker Hub
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            
            # Stop services gracefully
            echo "Stopping services..."
            docker-compose down --remove-orphans --timeout 30
            
            # Pull latest images
            echo "Pulling latest images..."
            docker pull ${DOCKERHUB_USERNAME}/monkids-backend:latest
            
            # Start services with health checks
            echo "Starting services..."
            docker-compose up -d
            
            # Enhanced health check
            echo "Performing health checks..."
            MAX_RETRIES=5
            RETRY_INTERVAL=20
            RETRY_COUNT=0
            
            check_service_health() {
              local service=$1
              local container_id=$(docker-compose ps -q $service)
              
              if [ -z "$container_id" ]; then
                echo "Container for $service not found!"
                return 1
              fi
              
              local status=$(docker inspect --format='{{.State.Health.Status}}' $container_id 2>/dev/null)
              local running=$(docker inspect --format='{{.State.Status}}' $container_id 2>/dev/null)
              
              if [ "$running" != "running" ]; then
                echo "$service container is not running!"
                docker-compose logs --tail=50 $service
                return 1
              fi
              
              if [ "$status" != "healthy" ]; then
                echo "$service is not healthy yet..."
                return 1
              fi
              
              return 0
            }
            
            until check_service_health backend && check_service_health nginx || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
              echo "Waiting for services... Attempt: $((RETRY_COUNT+1))/$MAX_RETRIES"
              docker-compose logs --tail=20
              sleep $RETRY_INTERVAL
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Services failed health check. Rolling back..."
              docker-compose logs --tail=100
              docker-compose down --volumes
              if [ -d "$BACKUP_DIR" ]; then
                cp $BACKUP_DIR/env/backend/.env . 2>/dev/null || true
                if [ -d "$BACKUP_DIR/data" ]; then
                  cp -r $BACKUP_DIR/data/* ./data/
                fi
                docker-compose up -d
              fi
              exit 1
            fi
            
            # Cleanup old backups (keep last 5)
            cd $BACKUP_BASE_DIR
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true
            
            # Cleanup old images
            docker system prune -f --filter "until=24h"
            
            # Print resource usage
            echo "Current resource usage:"
            docker stats --no-stream
            
            echo "Deployment completed successfully!" 