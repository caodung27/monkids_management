name: Backend Deployment

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          script: |
            set -e  # Exit on any error
            
            echo "Starting deployment..."
            WORKSPACE_DIR=/home/${{ secrets.EC2_USERNAME }}/monkids_management
            BACKUP_BASE_DIR=~/backups
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR=${BACKUP_BASE_DIR}/backup_${TIMESTAMP}
            
            # Create backup directory
            mkdir -p $BACKUP_DIR/{env,data}
            
            # Backup existing data
            echo "Creating backup..."
            if [ -d "$WORKSPACE_DIR" ]; then
              # Backup environment files
              find $WORKSPACE_DIR -name '.env*' -exec cp --parents {} $BACKUP_DIR/env/ \;
              
              # Backup data directory if exists
              if [ -d "$WORKSPACE_DIR/backend/data" ]; then
                cp -r $WORKSPACE_DIR/backend/data $BACKUP_DIR/data/
              fi
            fi
            
            # Create workspace if not exists
            if [ ! -d "$WORKSPACE_DIR/backend" ]; then
              mkdir -p $WORKSPACE_DIR/backend
            fi
            cd $WORKSPACE_DIR/backend
            
            # Restore or create .env
            if [ ! -f ".env" ] && [ -f "$BACKUP_DIR/env/backend/.env" ]; then
              echo "Restoring .env from backup..."
              cp "$BACKUP_DIR/env/backend/.env" .
            fi
            
            # Ensure .env exists
            if [ ! -f ".env" ]; then
              echo "Error: .env file not found!"
              exit 1
            fi
            
            # Stop existing containers
            echo "Stopping services..."
            docker-compose down --remove-orphans --timeout 30
            
            # Pull latest image
            echo "Pulling latest image..."
            docker pull ${DOCKER_USERNAME}/monkids-backend:latest
            
            # Start services
            echo "Starting services..."
            docker-compose up -d
            
            # Health check
            echo "Performing health checks..."
            MAX_RETRIES=5
            RETRY_INTERVAL=20
            RETRY_COUNT=0
            
            check_service_health() {
              local service=$1
              local container_id=$(docker-compose ps -q $service)
              
              if [ -z "$container_id" ]; then
                echo "Container for $service not found!"
                return 1
              fi
              
              local status=$(docker inspect --format='{{.State.Health.Status}}' $container_id 2>/dev/null)
              local running=$(docker inspect --format='{{.State.Status}}' $container_id 2>/dev/null)
              
              if [ "$running" != "running" ]; then
                echo "$service container is not running!"
                docker-compose logs --tail=50 $service
                return 1
              fi
              
              if [ "$status" != "healthy" ]; then
                echo "$service is not healthy yet..."
                return 1
              fi
              
              return 0
            }
            
            until check_service_health backend || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
              echo "Waiting for services... Attempt: $((RETRY_COUNT+1))/$MAX_RETRIES"
              docker-compose logs --tail=20
              sleep $RETRY_INTERVAL
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Services failed health check. Rolling back..."
              docker-compose logs --tail=100
              docker-compose down --volumes
              if [ -d "$BACKUP_DIR" ]; then
                # Restore from backup
                cp $BACKUP_DIR/env/backend/.env . 2>/dev/null || true
                if [ -d "$BACKUP_DIR/data" ]; then
                  cp -r $BACKUP_DIR/data/* ./data/
                fi
                docker-compose up -d
              fi
              exit 1
            fi
            
            # Cleanup
            echo "Cleaning up..."
            # Keep last 5 backups
            cd $BACKUP_BASE_DIR
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true
            
            # Cleanup old images
            docker system prune -f --filter "until=24h"
            
            echo "Deployment completed successfully!" 