name: Deploy Backend to EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker Image in Docker Hub"]
    types:
      - completed
    branches: [ "main" ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend:latest

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull latest Docker image
        run: |
          echo "Pulling image: ${{ env.DOCKER_IMAGE }}"
          docker pull ${{ env.DOCKER_IMAGE }}
          docker image inspect ${{ env.DOCKER_IMAGE }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/ec2.key
            StrictHostKeyChecking no
          END

      - name: Setup EC2 for Docker
        run: |
          ssh ec2 'docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p "${{ secrets.DOCKERHUB_TOKEN }}" && \
          docker pull ${{ env.DOCKER_IMAGE }}'

      - name: Create backup directory
        run: ssh ec2 'mkdir -p ~/backups'

      - name: Create backup
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ssh ec2 'cd ~/monkid_management && \
          if [ -f docker-compose.yml ]; then \
            cp docker-compose.yml ~/backups/docker-compose_${TIMESTAMP}.yml && \
            echo "Backup created at ~/backups/docker-compose_${TIMESTAMP}.yml"; \
          fi'

      - name: Clean old backups
        run: ssh ec2 'cd ~/backups && ls -t docker-compose_*.yml | tail -n +6 | xargs rm -f || true'

      - name: Update docker-compose.yml
        run: |
          cat > docker-compose.yml <<'EOL'
          version: '3.8'
          
          services:
            backend:
              image: ${DOCKER_USERNAME}/monkids-backend:latest
              container_name: monkids_backend
              restart: unless-stopped
              ports:
                - "8000:8000"
              environment:
                - NODE_ENV=production
                - PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome
                - PUPPETEER_NO_SANDBOX=true
                - DISPLAY=:99
              security_opt:
                - seccomp=unconfined
              cap_add:
                - SYS_ADMIN
              volumes:
                - ./data:/app/data
                - /tmp/.X11-unix:/tmp/.X11-unix
              tmpfs:
                - /tmp
              deploy:
                resources:
                  limits:
                    cpus: '1.0'
                    memory: 2G
                  reservations:
                    cpus: '0.5'
                    memory: 1G
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx-cache:/var/cache/nginx
              tmpfs:
                - /tmp
              depends_on:
                backend:
                  condition: service_healthy
              networks:
                - monkids-network
              logging:
                driver: "json-file"
                options:
                  max-size: "5m"
                  max-file: "3"
              deploy:
                resources:
                  limits:
                    cpus: '0.1'
                    memory: 128M
              healthcheck:
                test: ["CMD", "nginx", "-t"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped

          networks:
            monkids-network:
              driver: bridge

          volumes:
            backend-cache:
            nginx-cache:
          EOL
          scp docker-compose.yml ec2:~/monkid_management/

      - name: Deploy with Docker Compose
        run: |
          ssh ec2 'cd ~/monkid_management && \
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} && \
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }} && \
          docker compose pull && \
          docker compose down backend && \
          docker compose up -d --force-recreate backend && \
          docker system prune -f'

      - name: Verify Deployment
        run: |
          ssh ec2 'docker ps | grep monkids-backend && \
          docker logs monkids_backend --tail 50'

      - name: Health check
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          until ssh ec2 'curl -f http://localhost:8000/api/health' || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Health check failed. Retrying in 10 seconds..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Health check failed after $MAX_RETRIES attempts. Rolling back..."
            LATEST_BACKUP=$(ssh ec2 'cd ~/backups && ls -t docker-compose_*.yml | head -n1')
            if [ ! -z "$LATEST_BACKUP" ]; then
              ssh ec2 "cd ~/monkid_management && \
              cp ~/backups/$LATEST_BACKUP docker-compose.yml && \
              docker compose pull && \
              docker compose up -d"
              exit 1
            else
              echo "No backup found for rollback"
              exit 1
            fi
          fi 