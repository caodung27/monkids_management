name: Backend CI/CD Workflow

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "Starting deployment..."
            WORKSPACE_DIR=/home/${{ secrets.EC2_USERNAME }}/monkids_management
            
            # Quick setup/update
            if [ ! -d "$WORKSPACE_DIR" ]; then
              git clone --depth 1 --single-branch --branch main https://github.com/caodung27/monkids_management.git $WORKSPACE_DIR
            fi
            cd $WORKSPACE_DIR
            
            # Optimize git operations
            git fetch --prune --quiet
            git reset --hard origin/main
            
            # Create minimal backup
            timestamp=$(date +%Y%m%d_%H%M%S)
            backup_dir=~/backups/backup_${timestamp}
            mkdir -p $backup_dir
            if [ -f "backend/.env" ]; then
              cp backend/.env $backup_dir/
            fi
            
            cd backend
            
            # Stop and cleanup in parallel
            echo "Stopping services and cleaning up..."
            docker-compose down --remove-orphans
            docker system prune -af --volumes
            
            # Clear Docker build cache
            docker builder prune -af
            
            # Build with optimizations
            echo "Building services..."
            DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker-compose build \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --parallel
            
            # Start services
            echo "Starting services..."
            docker-compose up -d
            
            # Optimized health check
            echo "Starting health check..."
            MAX_RETRIES=3
            RETRY_INTERVAL=10
            RETRY_COUNT=0
            
            until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q backend))" = "healthy" ] || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
              if [ "$(docker inspect --format='{{.State.Status}}' $(docker-compose ps -q backend))" != "running" ]; then
                echo "Container failed to start. Logs:"
                docker-compose logs --tail=50 backend
                if [ -d "$backup_dir" ]; then
                  echo "Rolling back..."
                  cp $backup_dir/.env . 2>/dev/null || true
                  docker-compose up -d
                fi
                exit 1
              fi
              
              echo "Waiting for service... Attempt: $((RETRY_COUNT+1))/$MAX_RETRIES"
              sleep $RETRY_INTERVAL
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Service failed health check. Logs:"
              docker-compose logs --tail=50 backend
              exit 1
            fi
            
            # Cleanup old backups (keep last 3)
            cd ~/backups
            ls -t | tail -n +4 | xargs rm -rf 2>/dev/null || true
            
            echo "Deployment completed successfully!" 