name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

env:
  REGISTRY: docker.io
  REGISTRY_URL: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  NGINX_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-nginx

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ env.NGINX_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.NGINX_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.NGINX_IMAGE }}:buildcache,mode=max

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKERHUB_USERNAME,DATABASE_HOST,DATABASE_PORT,DATABASE_USERNAME,DATABASE_PASSWORD,DATABASE_NAME,JWT_SECRET,JWT_REFRESH_SECRET,GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET
          script: |
            cd ~/monkid_management
            
            # Export environment variables
            export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"
            export DATABASE_HOST="${DATABASE_HOST}"
            export DATABASE_PORT="${DATABASE_PORT}"
            export DATABASE_USERNAME="${DATABASE_USERNAME}"
            export DATABASE_PASSWORD="${DATABASE_PASSWORD}"
            export DATABASE_NAME="${DATABASE_NAME}"
            export JWT_SECRET="${JWT_SECRET}"
            export JWT_REFRESH_SECRET="${JWT_REFRESH_SECRET}"
            export GOOGLE_CLIENT_ID="${GOOGLE_CLIENT_ID}"
            export GOOGLE_CLIENT_SECRET="${GOOGLE_CLIENT_SECRET}"
            
            # Pull latest images
            docker-compose pull
            
            # Stop and remove existing containers
            docker-compose down --remove-orphans
            
            # Start services with environment variables
            docker-compose up -d
            
            # Wait for initial startup
            echo "Waiting for services to start..."
            sleep 30
            
            # Verify deployment with improved error handling
            MAX_ATTEMPTS=3
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Verification attempt $ATTEMPT of $MAX_ATTEMPTS"
              
              # Check if containers are running
              if ! docker-compose ps | grep -q "Up"; then
                echo "Containers are not running"
                docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              # Check container health
              if ! docker-compose ps | grep -q "healthy"; then
                echo "Containers are not healthy"
                docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              # Check API health
              if ! wget -q --spider --timeout=5 --no-check-certificate https://api.monkids.site/api/health; then
                echo "API health check failed"
                docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              echo "Deployment verified successfully"
              exit 0
            done
            
            echo "Deployment verification failed after $MAX_ATTEMPTS attempts"
            docker-compose logs
            exit 1

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment Failed',
              body: `Deployment failed for commit ${context.sha}. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            }); 