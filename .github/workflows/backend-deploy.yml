name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'nginx/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'nginx/**'

# This workflow handles the full deployment process to production
# Including building, pushing to Docker Hub, and deploying to EC2

permissions:
  contents: read
  issues: write

env:
  REGISTRY: docker.io
  REGISTRY_URL: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  NGINX_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-nginx

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max
          load: ${{ github.event_name == 'pull_request' }}

      - name: Build nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ env.NGINX_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.NGINX_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.NGINX_IMAGE }}:buildcache,mode=max
          load: ${{ github.event_name == 'pull_request' }}

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/monkids_management/backend
            
            # Force remove existing containers
            docker rm -f monkids_backend nginx || true
            
            # Stop and remove existing containers
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose down
            
            # Remove all containers
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose rm -f
            
            # Clean up unused resources
            docker system prune -f
            
            # Clean up all resources and volumes
            docker system prune -af --volumes
            
            # Pull latest images
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose pull
            
            # Start services with environment variables
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose up -d
            
            # Wait for initial startup
            echo "Waiting for services to start..."
            sleep 30
            
            # Verify deployment with improved error handling
            MAX_ATTEMPTS=3
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Verification attempt $ATTEMPT of $MAX_ATTEMPTS"
              
              # Check if containers are running
              if ! DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose ps | grep -q "Up"; then
                echo "Containers are not running"
                DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              # Check container health
              if ! DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose ps | grep -q "healthy"; then
                echo "Containers are not healthy"
                DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              # Check API health with improved error handling
              HEALTH_CHECK_RESPONSE=$(curl -s -w "\n%{http_code}" https://api.monkids.site/api/health)
              HTTP_CODE=$(echo "$HEALTH_CHECK_RESPONSE" | tail -n1)
              RESPONSE_BODY=$(echo "$HEALTH_CHECK_RESPONSE" | sed '$d')
              
              if [ "$HTTP_CODE" != "200" ]; then
                echo "API health check failed with status $HTTP_CODE"
                echo "Response body: $RESPONSE_BODY"
                DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs
                [ $ATTEMPT -eq $MAX_ATTEMPTS ] && exit 1
                ATTEMPT=$((ATTEMPT + 1))
                sleep 10
                continue
              fi
              
              echo "Deployment verified successfully"
              exit 0
            done
            
            echo "Deployment verification failed after $MAX_ATTEMPTS attempts"
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs
            exit 1

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment Failed',
              body: `Deployment failed for commit ${context.sha}. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            }); 
            