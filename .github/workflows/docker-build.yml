name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-,format=short
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Deploy steps (only run on push to main, not on PR)
      - name: Configure SSH for EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/ec2.key
            StrictHostKeyChecking no
          END

      - name: Setup Project Directory
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 '
          mkdir -p ~/monkid_management
          mkdir -p ~/monkid_management/data
          chmod 755 ~/monkid_management
          '

      - name: Cleanup EC2 Disk Space
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 '
          docker system prune -af --volumes
          docker images -q | xargs -r docker rmi -f
          sudo apt-get clean
          sudo apt-get autoremove -y
          df -h
          '

      - name: Setup EC2 Docker
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 "
          echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker pull ${{ env.DOCKER_IMAGE }} || {
            echo 'Failed to pull image. Checking disk space...'
            df -h
            exit 1
          }
          "

      - name: Update docker-compose.yml
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat > docker-compose.yml <<'EOL'
          version: '3.8'
          
          services:
            backend:
              image: ${DOCKER_USERNAME}/monkids-backend:latest
              container_name: monkids_backend
              restart: unless-stopped
              ports:
                - "8000:8000"
              environment:
                - NODE_ENV=production
                - PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome
                - PUPPETEER_NO_SANDBOX=true
                - DISPLAY=:99
              security_opt:
                - seccomp=unconfined
              cap_add:
                - SYS_ADMIN
              volumes:
                - ./data:/app/data
                - /tmp/.X11-unix:/tmp/.X11-unix
              tmpfs:
                - /tmp
              deploy:
                resources:
                  limits:
                    cpus: '1.0'
                    memory: 2G
                  reservations:
                    cpus: '0.5'
                    memory: 1G
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx-cache:/var/cache/nginx
              tmpfs:
                - /tmp
              depends_on:
                backend:
                  condition: service_healthy
              networks:
                - monkids-network
              logging:
                driver: "json-file"
                options:
                  max-size: "5m"
                  max-file: "3"
              deploy:
                resources:
                  limits:
                    cpus: '0.1'
                    memory: 128M
              healthcheck:
                test: ["CMD", "nginx", "-t"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped

          networks:
            monkids-network:
              driver: bridge

          volumes:
            nginx-cache:
          EOL
          scp docker-compose.yml ec2:~/monkid_management/

      - name: Deploy with Docker Compose
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 "
          cd ~/monkid_management
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          
          echo 'Stopping existing containers...'
          docker-compose down
          
          echo 'Cleaning up Docker system...'
          docker system prune -f
          
          echo 'Pulling new images...'
          docker-compose pull
          
          echo 'Starting containers...'
          docker-compose up -d --force-recreate backend
          
          echo 'Waiting for container to be ready...'
          sleep 30
          
          echo 'Container status:'
          docker ps -a
          
          echo 'Container logs:'
          docker logs monkids_backend --tail 50
          "

      - name: Health check
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          WAIT_TIME=20

          echo "Starting health check..."
          until ssh ec2 "
            echo '=== Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES ==='
            
            # Check if container is running
            if ! docker ps | grep -q monkids_backend; then
              echo 'Container is not running!'
              docker ps -a | grep monkids_backend
              echo 'Container logs:'
              docker logs monkids_backend --tail 20
              exit 1
            fi
            
            # Check port binding
            echo 'Checking port binding...'
            if ! docker port monkids_backend | grep -q '8000'; then
              echo 'Port 8000 is not bound!'
              docker port monkids_backend
              exit 1
            fi
            
            # Try health check
            echo 'Attempting health check...'
            curl -v http://localhost:8000/api/health
          " || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Health check failed. Waiting $WAIT_TIME seconds before retry..."
            sleep $WAIT_TIME
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "=== Final container status ==="
            ssh ec2 "
              echo 'Container status:'
              docker ps -a | grep monkids_backend
              echo 'Container logs:'
              docker logs monkids_backend --tail 50
              echo 'Port bindings:'
              docker port monkids_backend || echo 'No port bindings found'
              echo 'Network settings:'
              docker inspect monkids_backend -f '{{json .NetworkSettings.Ports}}' || echo 'Could not inspect container'
            "
            echo "Health check failed after $MAX_RETRIES attempts. Check logs above for details."
            exit 1
          fi 