name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  NGINX_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-nginx
  MAX_RETRIES: 3
  HEALTH_CHECK_INTERVAL: 30
  HEALTH_CHECK_TIMEOUT: 10

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        id: docker_build_backend
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            NODE_ENV=production

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        id: docker_build_nginx
        with:
          context: ./nginx
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.NGINX_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Setup SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          echo -e "Host ec2\n\tHostName $EC2_HOST\n\tUser $EC2_USERNAME\n\tIdentityFile ~/.ssh/key\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create deployment directory
          mkdir -p deploy
          cd deploy
          
          # Create environment file with Docker credentials
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" > .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=8000" >> .env
          
          # Add Chrome/Puppeteer specific configurations
          {
            echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true"
            echo "PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome"
            echo "PUPPETEER_NO_SANDBOX=true"
            echo "CHROME_PATH=/usr/bin/google-chrome"
            echo "CHROME_DBUS_ARGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --disable-software-rasterizer --headless=new --disable-setuid-sandbox --no-zygote --disable-dbus --disable-notifications --disable-features=Translate,BackForwardCache,AcceptCHFrame,MediaRouter,OptimizationHints --disable-dev-tools"
            echo "PUPPETEER_ARGS=--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-gpu --no-first-run --no-zygote --single-process --disable-extensions --disable-dbus --disable-dev-tools"
          } >> .env
          
          # Add system environment variables
          {
            echo "DBUS_SESSION_BUS_ADDRESS=/dev/null"
            echo "NO_PROXY=localhost,127.0.0.1"
            echo "TMPDIR=/home/ec2-user/monkid_management/tmp"
            echo "TERM=xterm"
            echo "DISABLE_DBUS=true"
            echo "DISPLAY=:99"
            echo "CHROME_CUSTOM_TMPDIR=/home/ec2-user/monkid_management/tmp/chrome"
          } >> .env
          
          # Append existing env if available
          if [ -f ../backend/.env ]; then
            cat ../backend/.env >> .env
          fi
          
          # Copy docker-compose.yml from backend directory
          if [ -f ../backend/docker-compose.yml ]; then
            cp ../backend/docker-compose.yml .
          else
            echo "Error: docker-compose.yml not found in backend directory"
            ls -la ../backend/
            exit 1
          fi
          
          # Copy nginx configuration
          mkdir -p nginx/conf.d
          if [ ! -f ../nginx/default.conf ]; then
            echo "Error: default.conf not found in nginx directory"
            ls -la ../nginx/
            exit 1
          fi
          cp ../nginx/default.conf nginx/conf.d/
          cp ../nginx/Dockerfile nginx/
          
          # Create data directory
          mkdir -p data
          
          echo "Copying files to EC2..."
          ssh ec2 "mkdir -p ~/monkid_management"
          scp -r * .env ec2:~/monkid_management/
          
          echo "Starting deployment on EC2..."
          ssh ec2 "
            set -ex
            cd ~/monkid_management
            
            # Function to retry commands
            retry() {
              local retries=\${MAX_RETRIES:-3}
              local count=0
              until \"\$@\"; do
                exit=\$?
                count=\$((count + 1))
                if [ \$count -lt \$retries ]; then
                  echo \"Command failed. Attempt \$count/\$retries. Retrying in 5s...\"
                  sleep 5
                else
                  echo \"Command failed after \$retries attempts\"
                  return \$exit
                fi
              done
              return 0
            }
            
            # Stop and remove existing containers
            docker-compose down --remove-orphans || true
            docker rm -f monkids_backend nginx || true
            docker system prune -f --volumes
            
            # Create required directories and files
            mkdir -p data tmp/{.local/share/applications,.X11-unix,chrome}
            touch tmp/.local/share/applications/mimeapps.list tmp/.Xauthority
            chmod -R 777 tmp
            
            # Verify configuration files
            for file in nginx/default.conf .env docker-compose.yml; do
              if [ ! -f \"\$file\" ]; then
                echo \"Error: \$file not found\"
                ls -la \$(dirname \"\$file\")
                exit 1
              fi
            done
            
            # Create or verify Docker network
            if ! docker network inspect backend-network >/dev/null 2>&1; then
              docker network create backend-network
            fi
            
            echo 'Verifying docker-compose configuration...'
            DOCKERHUB_USERNAME='$DOCKERHUB_USERNAME' docker-compose config
            
            echo 'Logging into Docker Hub...'
            retry docker login -u '$DOCKERHUB_USERNAME' -p '$DOCKERHUB_TOKEN'
            
            echo 'Pulling images...'
            retry DOCKERHUB_USERNAME='$DOCKERHUB_USERNAME' docker-compose pull --quiet
            
            echo 'Starting backend...'
            DOCKERHUB_USERNAME='$DOCKERHUB_USERNAME' docker-compose up -d backend
            
            echo 'Initial backend logs:'
            docker logs monkids_backend || true
            
            check_container_health() {
              local container=\$1
              local port=\$2
              local endpoint=\$3
              
              container_id=\$(docker ps -qf \"name=^\$container\$\" 2>/dev/null)
              if [ -z \"\$container_id\" ]; then
                echo \"Container \$container not found\"
                docker ps -a
                return 1
              fi
              
              container_status=\$(docker inspect --format='{{.State.Status}}' \"\$container_id\" 2>/dev/null)
              health_status=\$(docker inspect --format='{{.State.Health.Status}}' \"\$container_id\" 2>/dev/null)
              
              echo \"Container \$container status: \${container_status:-unknown}, health: \${health_status:-unknown}\"
              
              if [ \"\$container_status\" != 'running' ]; then
                echo \"Container \$container is not running (status: \${container_status:-unknown})\"
                docker logs \"\$container_id\" || true
                return 1
              fi
              
              if [ \"\$container\" = \"monkids_backend\" ]; then
                if ! docker logs \"\$container_id\" 2>&1 | grep -q 'Application is running on port: 8000'; then
                  echo 'Application startup message not found in logs'
                  docker logs \"\$container_id\" --tail 50 || true
                  return 1
                fi
              fi
              
              for i in {1..3}; do
                if wget -q --spider --timeout=\${HEALTH_CHECK_TIMEOUT:-10} \"\$endpoint\" 2>/dev/null; then
                  echo \"Health check passed for \$container\"
                  return 0
                fi
                echo \"Health check attempt \$i failed for \$container, retrying...\"
                sleep 5
              done
              
              echo \"Health check failed for \$container after 3 attempts\"
              return 1
            }
            
            attempts=0
            max_attempts=\${MAX_RETRIES:-3}
            
            echo 'Waiting for backend to be healthy...'
            while [ \$attempts -lt \$max_attempts ]
            do
              attempts=\$((attempts + 1))
              echo \"Health check attempt \$attempts/\$max_attempts\"
              
              sleep \${HEALTH_CHECK_INTERVAL:-30}
              
              if check_container_health \"monkids_backend\" 8000 \"http://localhost:8000/api/health\"; then
                echo 'Backend is healthy!'
                break
              fi
              
              if [ \$attempts -eq \$max_attempts ]; then
                echo \"Backend failed to become healthy after \$max_attempts attempts\"
                docker ps -a
                docker logs monkids_backend --tail 100 || true
                exit 1
              fi
            done
            
            echo 'Starting nginx...'
            DOCKERHUB_USERNAME='$DOCKERHUB_USERNAME' docker-compose up -d nginx
            
            echo 'Waiting for nginx to start...'
            sleep 20
            
            if ! check_container_health \"nginx\" 80 \"http://localhost/api/health\"; then
              echo 'Nginx health check failed'
              docker logs nginx || true
              docker exec nginx nginx -t || true
              docker exec nginx cat /etc/nginx/conf.d/default.conf || true
              exit 1
            fi
            
            echo 'Testing HTTPS endpoint...'
            if ! wget -q --spider --timeout=\${HEALTH_CHECK_TIMEOUT:-10} --no-check-certificate https://api.monkids.site/api/health 2>/dev/null; then
              echo 'HTTPS endpoint check failed'
              docker logs nginx || true
              exit 1
            fi
            
            echo 'All services are running and healthy'
            docker ps --format '{{.Names}} - {{.Status}}'
            
            echo 'Network Status:'
            docker network ls
            docker network inspect monkid_management_backend-network || true
            
            echo 'Directory Structure:'
            ls -la
            
            echo 'Environment File (without secrets):'
            cat .env | grep -v -E 'PASSWORD|SECRET|TOKEN'
          "

      - name: Verify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          sleep 15
          
          for i in {1..3}; do
            echo "Verification attempt $i/3..."
            
            if ssh ec2 "
              set -ex
              cd ~/monkid_management
              
              # Verify nginx configuration
              if ! docker exec nginx nginx -t 2>/dev/null; then
                echo 'Nginx configuration test failed'
                docker exec nginx nginx -t
                exit 1
              fi
              
              # Check both services
              for service in monkids_backend nginx; do
                if ! docker ps | grep -q \"\$service.*healthy\"; then
                  echo \"\$service container is not healthy\"
                  docker logs \$service
                  exit 1
                fi
              done
              
              # Check endpoints
              if ! wget -q --spider --timeout=5 http://localhost:8000/api/health 2>/dev/null; then
                echo 'Backend health check failed'
                docker logs --tail 50 monkids_backend
                exit 1
              fi
              
              if ! wget -q --spider --timeout=5 --no-check-certificate https://api.monkids.site/api/health 2>/dev/null; then
                echo 'HTTPS health check failed'
                docker logs --tail 50 nginx
                exit 1
              fi
              
              echo 'All health checks passed'
            "; then
              echo "Deployment verified successfully"
              exit 0
            fi
            
            [ $i -eq 3 ] && {
              echo "=== Final Status ==="
              ssh ec2 "
                set -ex
                cd ~/monkid_management
                
                echo 'Container Status:'
                docker ps -a
                
                echo 'Backend Logs:'
                docker logs --tail 50 monkids_backend || true
                
                echo 'Nginx Logs:'
                docker logs --tail 50 nginx || true
                
                echo 'Nginx Configuration Test:'
                docker exec nginx nginx -t || true
                
                echo 'Docker Compose Config:'
                docker-compose config
                
                echo 'Network Status:'
                docker network inspect backend-network || true
                
                echo 'Directory Structure:'
                ls -la
                
                echo 'Environment File (without secrets):'
                cat .env | grep -v -E 'PASSWORD|SECRET|TOKEN'
              "
              echo "Verification failed after 3 attempts"
              exit 1
            }
            
            echo "Waiting before next attempt..."
            sleep 15
          done 