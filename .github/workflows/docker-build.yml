name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            NODE_ENV=production

      - name: Setup SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          echo -e "Host ec2\n\tHostName $EC2_HOST\n\tUser $EC2_USERNAME\n\tIdentityFile ~/.ssh/key\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create deployment directory
          mkdir -p deploy
          cd deploy
          
          # Copy .env file from backend
          cp ../backend/.env .
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            backend:
              image: ${DOCKERHUB_USERNAME}/monkids-backend:latest
              container_name: monkids_backend
              restart: unless-stopped
              ports:
                - "8000:8000"
              env_file:
                - .env
              security_opt:
                - seccomp=unconfined
              cap_add:
                - SYS_ADMIN
              volumes:
                - ./data:/app/data
                - /tmp/.X11-unix:/tmp/.X11-unix
              tmpfs:
                - /tmp
              deploy:
                resources:
                  limits:
                    cpus: '1.0'
                    memory: 2G
                  reservations:
                    cpus: '0.5'
                    memory: 1G
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 60s
              networks:
                - monkids-network
          
            nginx:
              image: nginx:alpine
              container_name: nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx-cache:/var/cache/nginx
              tmpfs:
                - /tmp
              depends_on:
                backend:
                  condition: service_healthy
              networks:
                - monkids-network
              logging:
                driver: "json-file"
                options:
                  max-size: "5m"
                  max-file: "3"
              deploy:
                resources:
                  limits:
                    cpus: '0.1'
                    memory: 128M
              healthcheck:
                test: ["CMD", "nginx", "-t"]
                interval: 30s
                timeout: 10s
                retries: 3
          
          networks:
            monkids-network:
              external: true
          
          volumes:
            nginx-cache:
          EOF
          
          # Copy nginx configuration
          cp -r ../nginx .
          
          echo "Copying files to EC2..."
          ssh ec2 "mkdir -p ~/monkid_management"
          scp -r * .env ec2:~/monkid_management/
          
          echo "Starting deployment on EC2..."
          ssh ec2 "
            set -ex
            cd ~/monkid_management
            
            # Export required environment variables
            export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            
            # Stop and remove existing containers
            docker-compose down --remove-orphans || true
            docker rm -f monkids_backend nginx || true
            
            # Cleanup
            docker system prune -f --volumes
            
            # Create network if it doesn't exist
            docker network create monkids-network 2>/dev/null || true
            
            # Create required directories with sudo
            sudo mkdir -p /tmp/.X11-unix
            sudo chmod 1777 /tmp/.X11-unix
            mkdir -p data
            
            # Verify docker-compose config
            docker-compose config
            
            # Pull and start services
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
            docker-compose pull --quiet
            
            # Start backend first to debug any issues
            docker-compose up -d backend
            
            # Show backend logs immediately
            echo "Initial backend logs:"
            docker logs monkids_backend
            
            # Wait for backend to be healthy with better logging
            echo 'Waiting for backend to be healthy...'
            for i in {1..30}; do
              echo "Attempt $i: Checking backend health..."
              docker ps --format "{{.Names}} - {{.Status}}" | grep monkids_backend || true
              
              if docker ps | grep -q 'monkids_backend.*healthy'; then
                echo 'Backend is healthy'
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo 'Backend failed to become healthy. Showing logs:'
                docker logs monkids_backend
                docker inspect monkids_backend
                exit 1
              fi
              
              # Show recent logs on each attempt
              echo "Recent backend logs:"
              docker logs --tail 20 monkids_backend
              sleep 10
            done
            
            # Only start nginx if backend is healthy
            docker-compose up -d nginx
            
            # Verify nginx is running
            if ! docker ps | grep -q 'nginx.*healthy'; then
              echo 'Nginx failed to start or become healthy'
              docker logs nginx
              exit 1
            fi
            
            echo 'Deployment completed successfully'
            docker ps --format '{{.Names}} - {{.Status}}'
          "

      - name: Verify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Wait for services to be fully ready
          sleep 15
          
          # Try to verify deployment
          for i in {1..3}; do
            echo "Verification attempt $i/3..."
            
            if ssh ec2 "
              set -x
              
              # Check backend container status
              if ! docker ps | grep -q 'monkids_backend.*healthy'; then
                echo 'Backend container is not healthy'
                docker logs monkids_backend
                exit 1
              fi
              
              # Check backend health endpoint
              if ! curl -sf http://localhost:8000/api/health >/dev/null; then
                echo 'Backend health check failed'
                docker logs --tail 50 monkids_backend
                exit 1
              fi
              
              # Check nginx container status
              if ! docker ps | grep -q 'nginx.*healthy'; then
                echo 'Nginx container is not healthy'
                docker logs nginx
                exit 1
              fi
              
              # Check nginx/https
              if ! curl -sfk https://api.monkids.site/api/health >/dev/null; then
                echo 'HTTPS health check failed'
                docker logs --tail 50 nginx
                exit 1
              fi
              
              echo 'All health checks passed'
            "; then
              echo "Deployment verified successfully"
              exit 0
            fi
            
            [ $i -eq 3 ] && { 
              echo "=== Final Status ==="
              ssh ec2 "
                set -x
                echo 'Container Status:'
                docker ps -a
                echo 'Backend Logs:'
                docker logs --tail 50 monkids_backend || true
                echo 'Nginx Logs:'
                docker logs --tail 50 nginx || true
                echo 'Docker Compose Config:'
                docker-compose config
                echo 'Network Status:'
                docker network inspect monkids-network
                echo 'Directory Structure:'
                ls -la
                echo 'Environment File:'
                cat .env | grep -v -E 'PASSWORD|SECRET|TOKEN'
              "
              echo "Verification failed after 3 attempts"
              exit 1
            }
            
            echo "Waiting before next attempt..."
            sleep 15
          done 