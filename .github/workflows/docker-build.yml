name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  # Database Configuration
  DATABASE_HOST: 172.31.14.122
  DATABASE_PORT: 5432
  DATABASE_USERNAME: postgres
  DATABASE_PASSWORD: postgres
  DATABASE_NAME: postgres
  # JWT Configuration
  JWT_SECRET: monkids
  JWT_REFRESH_SECRET: monkids
  JWT_EXPIRATION: 1d
  JWT_REFRESH_EXPIRATION: 7d
  # Google OAuth2 Configuration
  GOOGLE_CLIENT_ID: 542269964324-6kmatcq5rp191efr3eiouu60hkqdg6jk.apps.googleusercontent.com
  GOOGLE_CLIENT_SECRET: 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
  GOOGLE_CALLBACK_URL: https://api.monkids.site/api/auth/google/callback
  # Application Configuration
  PORT: 8000
  NODE_ENV: production
  FRONTEND_URL: https://www.monkids.site/

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-,format=short
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Configure SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/ec2.key
            StrictHostKeyChecking no
          END

      - name: Copy configuration files to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          scp backend/docker-compose.yml ec2:~/monkid_management/
          scp -r nginx ec2:~/monkid_management/

      - name: Deploy with Docker Compose
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 "
          cd ~/monkid_management
          
          # Create .env file with required environment variables
          cat > .env << EOL
          # Database Configuration
          DATABASE_HOST=${{ env.DATABASE_HOST }}
          DATABASE_PORT=${{ env.DATABASE_PORT }}
          DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ env.DATABASE_NAME }}

          # JWT Configuration
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION=${{ env.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}

          # Google OAuth2 Configuration
          GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ env.GOOGLE_CALLBACK_URL }}

          # Application Configuration
          PORT=${{ env.PORT }}
          NODE_ENV=${{ env.NODE_ENV }}
          FRONTEND_URL=${{ env.FRONTEND_URL }}

          # Docker configuration
          DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          EOL
          
          # Verify environment variables
          echo 'Verifying environment variables...'
          if [ ! -f .env ]; then
            echo 'Error: .env file not created'
            exit 1
          fi
          
          # Check if required variables are set
          required_vars=(
            DATABASE_HOST DATABASE_PORT DATABASE_USERNAME DATABASE_PASSWORD DATABASE_NAME
            JWT_SECRET JWT_REFRESH_SECRET JWT_EXPIRATION JWT_REFRESH_EXPIRATION
            GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET GOOGLE_CALLBACK_URL
            PORT NODE_ENV FRONTEND_URL DOCKER_USERNAME
          )
          for var in \${required_vars[@]}; do
            if ! grep -q "^\$var=" .env; then
              echo "Error: \$var is not set in .env file"
              exit 1
            fi
          done
          
          echo 'Environment variables verified successfully'
          
          echo 'Stopping existing containers...'
          docker-compose down
          
          echo 'Cleaning up Docker system...'
          docker system prune -f
          
          echo 'Pulling new images...'
          docker-compose pull
          
          echo 'Starting containers...'
          docker-compose up -d --force-recreate backend
          
          echo 'Waiting for container to be ready...'
          sleep 30
          
          echo 'Container status:'
          docker ps -a
          
          echo 'Container logs:'
          docker logs monkids_backend --tail 50
          "

      - name: Health check
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          WAIT_TIME=20

          echo "Starting health check..."
          until ssh ec2 "
            echo '=== Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES ==='
            
            # Check if container is running
            if ! docker ps | grep -q monkids_backend; then
              echo 'Container is not running!'
              docker ps -a | grep monkids_backend
              echo 'Container logs:'
              docker logs monkids_backend --tail 20
              exit 1
            fi
            
            # Check environment variables
            echo 'Checking environment variables...'
            docker exec monkids_backend env | grep -E 'JWT_SECRET|DB_'
            
            # Check port binding
            echo 'Checking port binding...'
            if ! docker port monkids_backend | grep -q '8000'; then
              echo 'Port 8000 is not bound!'
              docker port monkids_backend
              exit 1
            fi
            
            # Try health check
            echo 'Attempting health check...'
            curl -v http://localhost:8000/api/health
          " || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Health check failed. Waiting $WAIT_TIME seconds before retry..."
            sleep $WAIT_TIME
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "=== Final container status ==="
            ssh ec2 "
              echo 'Container status:'
              docker ps -a | grep monkids_backend
              echo 'Container logs:'
              docker logs monkids_backend --tail 50
              echo 'Environment variables:'
              docker exec monkids_backend env | grep -E 'JWT_SECRET|DB_'
              echo 'Port bindings:'
              docker port monkids_backend || echo 'No port bindings found'
              echo 'Network settings:'
              docker inspect monkids_backend -f '{{json .NetworkSettings.Ports}}' || echo 'Could not inspect container'
            "
            echo "Health check failed after $MAX_RETRIES attempts. Check logs above for details."
            exit 1
          fi 