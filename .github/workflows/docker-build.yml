name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  REGISTRY_URL: docker.io/cxddcx27
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  NGINX_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-nginx
  MAX_RETRIES: 3
  RETRY_DELAY: 5
  HEALTH_CHECK_RETRIES: 3
  HEALTH_CHECK_INTERVAL: 10
  DEPLOY_TIMEOUT: 180

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      backend_digest: ${{ steps.docker_build_backend.outputs.digest }}
      nginx_digest: ${{ steps.docker_build_nginx.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Backend Image
        id: docker_build_backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          build-args: |
            NODE_ENV=production
          outputs: type=docker,dest=/tmp/backend-image.tar
          platforms: linux/amd64

      - name: Build Nginx Image
        id: docker_build_nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.NGINX_IMAGE }}:latest
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx
          outputs: type=docker,dest=/tmp/nginx-image.tar
          platforms: linux/amd64

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          echo -e "Host ec2\n\tHostName $EC2_HOST\n\tUser $EC2_USERNAME\n\tIdentityFile ~/.ssh/key\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config

      - name: Prepare Deployment
        run: |
          mkdir -p deploy
          cd deploy
          
          # Create optimized environment file
          cat > .env << EOL
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          NODE_ENV=production
          PORT=8000
          
          # Database Configuration
          DATABASE_HOST=${{ env.DATABASE_HOST }}
          DATABASE_PORT=${{ env.DATABASE_PORT }}
          DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ env.DATABASE_NAME }}
          
          # JWT Configuration
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION=${{ env.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}
          
          # Google OAuth2 Configuration
          GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ env.GOOGLE_CALLBACK_URL }}
          FRONTEND_URL=${{ env.FRONTEND_URL }}
          
          # Chrome/Puppeteer Configuration
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome
          PUPPETEER_NO_SANDBOX=true
          CHROME_PATH=/usr/bin/google-chrome
          CHROME_DBUS_ARGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless=new
          PUPPETEER_ARGS=--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage
          
          # System Configuration
          DBUS_SESSION_BUS_ADDRESS=/dev/null
          NO_PROXY=localhost,127.0.0.1
          TMPDIR=/home/ec2-user/monkid_management/tmp
          CHROME_CUSTOM_TMPDIR=/home/ec2-user/monkid_management/tmp/chrome
          DISPLAY=:99
          EOL
          
          # Copy configuration files
          cp ../backend/docker-compose.yml .
          mkdir -p nginx/conf.d
          cp ../nginx/default.conf nginx/conf.d/
          cp ../nginx/Dockerfile nginx/

      - name: Deploy to EC2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          scp -r deploy/* deploy/.env ec2:~/monkid_management/
          
          ssh ec2 "
            set -ex
            cd ~/monkid_management
            
            # Stop existing containers
            docker-compose down --remove-orphans
            docker system prune -f --volumes
            
            # Prepare directories
            mkdir -p {data,tmp/{.local/share/applications,.X11-unix,chrome}}
            touch tmp/.local/share/applications/mimeapps.list
            chmod -R 777 tmp
            
            # Verify files
            for file in nginx/default.conf .env docker-compose.yml; do
              if [ ! -f \$file ]; then
                echo \"Error: \$file not found\"
                exit 1
              fi
            done
            
            # Setup network
            docker network create backend-network || true
            
            # Login to Docker Hub
            echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin
            
            # Pull and start services
            DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' docker-compose pull --quiet
            DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' docker-compose up -d
            
            # Monitor deployment
            start_time=\$(date +%s)
            
            while true; do
              current_time=\$(date +%s)
              elapsed_time=\$((current_time - start_time))
              
              if [ \$elapsed_time -gt ${{ env.DEPLOY_TIMEOUT }} ]; then
                echo 'Deployment timeout exceeded'
                docker-compose logs
                exit 1
              fi
              
              if docker-compose ps | grep -q '(healthy)'; then
                echo 'Services are healthy'
                break
              fi
              
              echo 'Waiting for services to be healthy...'
              sleep ${{ env.HEALTH_CHECK_INTERVAL }}
            done
            
            # Final verification
            if ! wget -q --spider --timeout=5 --no-check-certificate https://api.monkids.site/api/health; then
              echo 'Health check failed'
              docker-compose logs
              exit 1
            fi
            
            echo 'Deployment successful'
          "

      - name: Verify Deployment
        run: |
          for i in {1..3}; do
            if ssh ec2 "
              cd ~/monkid_management
              
              # Quick health checks
              docker-compose ps --format json | grep -q '\"Health\": \"healthy\"' && \
              wget -q --spider --timeout=5 --no-check-certificate https://api.monkids.site/api/health
            "; then
              echo "Deployment verified successfully"
              exit 0
            fi
            
            echo "Verification attempt $i failed, retrying..."
            sleep ${{ env.RETRY_DELAY }}
          done
          
          echo "Deployment verification failed"
          ssh ec2 "cd ~/monkid_management && docker-compose logs"
          exit 1 