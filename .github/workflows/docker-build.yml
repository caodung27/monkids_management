name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend
  # Database Configuration
  DATABASE_HOST: 172.31.14.122
  DATABASE_PORT: 5432
  DATABASE_USERNAME: postgres
  DATABASE_PASSWORD: postgres
  DATABASE_NAME: postgres
  # JWT Configuration
  JWT_SECRET: monkids
  JWT_REFRESH_SECRET: monkids
  JWT_EXPIRATION: 1d
  JWT_REFRESH_EXPIRATION: 7d
  # Google OAuth2 Configuration
  GOOGLE_CLIENT_ID: 542269964324-6kmatcq5rp191efr3eiouu60hkqdg6jk.apps.googleusercontent.com
  GOOGLE_CLIENT_SECRET: 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
  GOOGLE_CALLBACK_URL: https://api.monkids.site/api/auth/google/callback
  # Application Configuration
  PORT: 8000
  NODE_ENV: production
  FRONTEND_URL: https://www.monkids.site/

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Configure SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/ec2.key
            StrictHostKeyChecking no
          END

      - name: Deploy with Docker Compose
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh ec2 "
          cd ~/monkid_management
          
          # Create .env file with required environment variables
          cat > .env << EOL
          # Database Configuration
          DATABASE_HOST=${{ env.DATABASE_HOST }}
          DATABASE_PORT=${{ env.DATABASE_PORT }}
          DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ env.DATABASE_NAME }}

          # JWT Configuration
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION=${{ env.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}

          # Google OAuth2 Configuration
          GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ env.GOOGLE_CALLBACK_URL }}

          # Application Configuration
          PORT=${{ env.PORT }}
          NODE_ENV=${{ env.NODE_ENV }}
          FRONTEND_URL=${{ env.FRONTEND_URL }}

          # Docker configuration
          DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          EOL

          # Stop and remove containers in parallel
          docker-compose down --remove-orphans & 
          sudo systemctl stop nginx &
          wait
          
          # Clean and prepare in parallel
          docker system prune -f &
          sudo mkdir -p /etc/letsencrypt &
          sudo chown -R $USER:$USER /etc/letsencrypt &
          docker network create monkids-network || true &
          wait
          
          # Pull images in parallel
          docker-compose pull --parallel
          
          # Start backend and wait for health
          docker-compose up -d backend
          
          # Check backend health with timeout
          timeout 10s bash -c '
            until curl -s http://localhost:8000/api/health > /dev/null; do
              sleep 1
            done
          '
          
          # Start nginx if backend is healthy
          if [ $? -eq 0 ]; then
            docker-compose up -d nginx
            
            echo '=== Container Status ==='
            docker ps -a
            
            echo '=== Backend Logs ==='
            docker logs --tail 20 monkids_backend
            
            echo '=== Nginx Logs ==='
            docker logs --tail 20 nginx
          else
            echo 'Backend failed to start'
            docker logs monkids_backend
            exit 1
          fi
          "

      - name: Health check
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          MAX_RETRIES=2
          RETRY_COUNT=0
          WAIT_TIME=10

          echo "Starting health check..."
          until ssh ec2 "
            echo '=== Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES ==='
            
            # Check both endpoints in parallel
            curl -s http://localhost:8000/api/health > /dev/null &
            curl -sk https://api.monkids.site/api/health > /dev/null &
            wait
            
            if [ $? -eq 0 ]; then
              echo 'Health check passed'
              docker ps -a
              exit 0
            else
              echo 'Health check failed'
              docker logs --tail 20 monkids_backend
              docker logs --tail 20 nginx
              exit 1
            fi
          " || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Health check failed. Waiting $WAIT_TIME seconds before retry..."
            sleep $WAIT_TIME
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Health check failed after $MAX_RETRIES attempts"
            exit 1
          fi 