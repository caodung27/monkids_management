name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            NODE_ENV=production

      - name: Configure SSH and Deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          echo -e "Host ec2\n\tHostName $EC2_HOST\n\tUser $EC2_USERNAME\n\tIdentityFile ~/.ssh/key\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
          
          # Deploy to EC2
          ssh ec2 "
            set -e
            cd ~/monkid_management
            
            # Quick environment setup
            cat > .env << 'EOL'
            DATABASE_HOST=${{ env.DATABASE_HOST }}
            DATABASE_PORT=${{ env.DATABASE_PORT }}
            DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ env.DATABASE_NAME }}
            JWT_SECRET=${{ env.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
            JWT_EXPIRATION=${{ env.JWT_EXPIRATION }}
            JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}
            GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CALLBACK_URL=${{ env.GOOGLE_CALLBACK_URL }}
            PORT=${{ env.PORT }}
            NODE_ENV=${{ env.NODE_ENV }}
            FRONTEND_URL=${{ env.FRONTEND_URL }}
            DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EOL
            
            # Parallel cleanup
            {
              docker-compose down --remove-orphans
              sudo systemctl stop nginx
              docker system prune -f --volumes
              docker network create monkids-network 2>/dev/null || true
            } &> /dev/null & wait

            # Pull and start services
            docker-compose pull --quiet --parallel
            
            # Start backend with health check
            docker-compose up -d backend
            for i in {1..5}; do
              if curl -sf http://localhost:8000/api/health >/dev/null; then
                break
              fi
              [ $i -eq 5 ] && { echo 'Backend failed to start'; exit 1; }
              sleep 2
            done
            
            # Start nginx if backend is healthy
            docker-compose up -d nginx
            
            # Quick status check
            docker ps --format '{{.Names}} - {{.Status}}'
          "

      - name: Verify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          for i in {1..3}; do
            if ssh ec2 "
              curl -sf http://localhost:8000/api/health >/dev/null && 
              curl -sfk https://api.monkids.site/api/health >/dev/null
            "; then
              echo "Deployment verified successfully"
              exit 0
            fi
            [ $i -eq 3 ] && { echo "Verification failed"; exit 1; }
            sleep 5
          done 