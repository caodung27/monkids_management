name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose.yml'
      - 'nginx/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/monkids-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            NODE_ENV=production

      - name: Setup SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          echo -e "Host ec2\n\tHostName $EC2_HOST\n\tUser $EC2_USERNAME\n\tIdentityFile ~/.ssh/key\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create deployment directory
          mkdir -p deploy
          cd deploy
          
          # Copy .env file from backend with proper error handling
          echo "Copying .env file..."
          if [ ! -f ../backend/.env ]; then
            echo "Warning: .env file not found in backend directory"
            # Create minimal .env file for deployment
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=8000
            EOF
          else
            cp ../backend/.env .
          fi
          
          # Create docker-compose.yml
          echo "Creating docker-compose.yml..."
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            backend:
              image: ${DOCKERHUB_USERNAME}/monkids-backend:latest
              container_name: monkids_backend
              restart: unless-stopped
              ports:
                - "8000:8000"
              env_file:
                - .env
              environment:
                - NODE_ENV=production
                - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
                - CHROME_PATH=/usr/bin/google-chrome
                - PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome
                - PUPPETEER_ARGS=--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-gpu,--headless=new,--disable-software-rasterizer,--disable-dbus,--disable-extensions,--no-first-run,--no-zygote,--single-process
                - NO_SANDBOX=true
                - DBUS_SESSION_BUS_ADDRESS=/dev/null
                - DISPLAY=:99
                - HOME=/tmp
                - XDG_RUNTIME_DIR=/tmp
                - XDG_CACHE_HOME=/tmp/.cache
                - XDG_CONFIG_HOME=/tmp/.config
                - XDG_DATA_HOME=/tmp/.local/share
                - CHROME_DBUS_SYSTEM_BUS_SOCKET=/dev/null
                - CHROME_DBUS_SESSION_BUS_SOCKET=/dev/null
              user: root
              security_opt:
                - seccomp=unconfined
              cap_add:
                - SYS_ADMIN
              volumes:
                - ./data:/app/data
              tmpfs:
                - /tmp:exec,mode=1777,size=2G
                - /run:exec,mode=1777
                - /run/lock:exec,mode=1777
                - /dev/shm:mode=1777,size=2G
              ipc: host
              healthcheck:
                test: ["CMD", "wget", "-q", "--spider", "--no-proxy", "http://localhost:8000/api/health"]
                interval: 10s
                timeout: 5s
                retries: 3
              networks:
                - monkids-network
          
            nginx:
              image: nginx:alpine
              container_name: nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx-cache:/var/cache/nginx
              tmpfs:
                - /tmp
              depends_on:
                backend:
                  condition: service_healthy
                  required: true
              networks:
                - monkids-network
              healthcheck:
                test: ["CMD", "wget", "-q", "--spider", "--no-proxy", "http://localhost/api/health"]
                interval: 10s
                timeout: 5s
                retries: 3
              deploy:
                resources:
                  limits:
                    cpus: '0.1'
                    memory: 128M
          
          networks:
            monkids-network:
              name: monkids-network
              driver: bridge
          
          volumes:
            nginx-cache:
          EOF
          
          # Create data directory
          mkdir -p data
          
          echo "Copying files to EC2..."
          ssh ec2 "mkdir -p ~/monkid_management"
          scp -r * .env ec2:~/monkid_management/
          
          echo "Starting deployment on EC2..."
          ssh ec2 "
            set -ex
            cd ~/monkid_management
            
            # Export required environment variables
            export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            
            # Stop and remove existing containers
            docker-compose down --remove-orphans || true
            docker rm -f monkids_backend nginx || true
            
            # Cleanup
            docker system prune -f --volumes
            
            # Create required directories
            mkdir -p data
            mkdir -p /tmp/.local/share/applications
            touch /tmp/.local/share/applications/mimeapps.list
            
            # Verify docker-compose config
            docker-compose config
            
            # Pull and start services
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
            docker-compose pull --quiet
            
            # Start backend first
            echo 'Starting backend...'
            docker-compose up -d backend
            
            # Show backend logs
            echo 'Initial backend logs:'
            docker logs monkids_backend || true
            
            # Function to check if container is running and healthy
            check_container_health() {
              container_status=''
              health_status=''
              container_id=''
              
              # Get container ID first
              container_id=\$(docker ps -qf 'name=^monkids_backend$' 2>/dev/null)
              if [ -z \"\$container_id\" ]; then
                echo 'Container not found'
                docker ps -a
                return 1
              fi
              
              # Get detailed container status and health
              container_status=\$(docker inspect --format='{{.State.Status}}' \"\$container_id\" 2>/dev/null)
              health_status=\$(docker inspect --format='{{.State.Health.Status}}' \"\$container_id\" 2>/dev/null)
              
              echo \"Container status: \${container_status:-unknown}, health: \${health_status:-unknown}\"
              
              if [ \"\$container_status\" != 'running' ]; then
                echo \"Container is not running (status: \${container_status:-unknown})\"
                docker logs \"\$container_id\" || true
                return 1
              fi
              
              # Check application logs for startup message
              if ! docker logs \"\$container_id\" 2>&1 | grep -q 'Application is running on port: 8000'; then
                echo 'Application startup message not found in logs'
                docker logs \"\$container_id\" --tail 50 || true
                return 1
              fi
              
              # Test health endpoint with retry
              for i in {1..3}; do
                if wget -q --spider --timeout=5 http://localhost:8000/api/health 2>/dev/null; then
                  echo 'Health endpoint check passed'
                  return 0
                fi
                echo \"Health check attempt \$i failed, retrying...\"
                sleep 2
              done
              
              echo 'Health endpoint check failed after 3 attempts'
              return 1
            }
            
            # Initialize variables
            attempts=0
            max_attempts=3
            
            echo 'Waiting for backend to be healthy...'
            while [ \$attempts -lt \$max_attempts ]
            do
              attempts=\$((attempts + 1))
              echo \"Health check attempt \$attempts/\$max_attempts\"
              
              # Give container more time to initialize
              sleep 15
              
              if check_container_health; then
                echo 'Backend is healthy!'
                break
              fi
              
              # Show container status on failure
              docker ps -a
              docker inspect monkids_backend --format='{{.State.Health}}' || true
              
              # Exit if max attempts reached
              if [ \$attempts -eq \$max_attempts ]; then
                echo \"Backend failed to become healthy after \$max_attempts attempts\"
                docker ps -a
                docker logs monkids_backend --tail 100 || true
                exit 1
              fi
            done
            
            # Final verification
            echo 'Performing final health verification...'
            if check_container_health; then
              echo 'Backend container is verified healthy and ready for nginx'
              
              # Only start nginx if backend is healthy
              echo 'Starting nginx...'
              docker-compose up -d nginx
              
              # Wait for nginx to start and verify
              echo 'Waiting for nginx to start...'
              sleep 10
              
              # Check if nginx is running
              if ! docker ps | grep -q nginx; then
                echo 'Nginx failed to start'
                docker logs nginx || true
                exit 1
              fi
              
              # Verify nginx is responding
              if ! wget -q --spider http://localhost/health 2>/dev/null; then
                echo 'Nginx is not responding'
                docker logs nginx || true
                docker exec nginx nginx -t || true
                exit 1
              fi
              
              # Final check of both services
              if docker ps | grep -q 'nginx' && docker ps | grep -q 'monkids_backend'; then
                echo 'Both services are running'
                docker ps --format '{{.Names}} - {{.Status}}'
                
                # Test nginx proxy to backend
                echo 'Testing nginx proxy to backend...'
                if wget -q --spider http://localhost/api/health 2>/dev/null; then
                  echo 'Nginx proxy test successful'
                else
                  echo 'Nginx proxy test failed'
                  echo 'Nginx configuration:'
                  docker exec nginx cat /etc/nginx/conf.d/default.conf || true
                  echo 'Nginx logs:'
                  docker logs nginx || true
                  exit 1
                fi
              else
                echo 'Services failed to start properly'
                docker ps -a
                docker logs monkids_backend --tail 50 || true
                docker logs nginx --tail 50 || true
                exit 1
              fi
            else
              echo 'Final verification failed - container is not healthy'
              docker ps -a
              docker logs monkids_backend || true
              exit 1
            fi
          "

      - name: Verify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Wait for services to be fully ready
          sleep 15
          
          # Try to verify deployment
          for i in {1..3}; do
            echo "Verification attempt $i/3..."
            
            if ssh ec2 "
              set -x
              
              # Check backend container status
              if ! docker ps | grep -q 'monkids_backend.*healthy'; then
                echo 'Backend container is not healthy'
                docker logs monkids_backend
                exit 1
              fi
              
              # Check backend health endpoint
              if ! wget -q --spider --timeout=5 http://localhost:8000/api/health 2>/dev/null; then
                echo 'Backend health check failed'
                docker logs --tail 50 monkids_backend
                exit 1
              fi
              
              # Check nginx container status
              if ! docker ps | grep -q 'nginx.*healthy'; then
                echo 'Nginx container is not healthy'
                docker logs nginx
                exit 1
              fi
              
              # Check nginx/https
              if ! wget -q --spider --timeout=5 https://api.monkids.site/api/health 2>/dev/null; then
                echo 'HTTPS health check failed'
                docker logs --tail 50 nginx
                exit 1
              fi
              
              echo 'All health checks passed'
            "; then
              echo "Deployment verified successfully"
              exit 0
            fi
            
            [ $i -eq 3 ] && { 
              echo "=== Final Status ==="
              ssh ec2 "
                set -x
                echo 'Container Status:'
                docker ps -a
                echo 'Backend Logs:'
                docker logs --tail 50 monkids_backend || true
                echo 'Nginx Logs:'
                docker logs --tail 50 nginx || true
                echo 'Docker Compose Config:'
                docker-compose config
                echo 'Network Status:'
                docker network inspect monkids-network
                echo 'Directory Structure:'
                ls -la
                echo 'Environment File:'
                cat .env | grep -v -E 'PASSWORD|SECRET|TOKEN'
              "
              echo "Verification failed after 3 attempts"
              exit 1
            }
            
            echo "Waiting before next attempt..."
            sleep 15
          done 