# HTTP server for health checks and API
server {
    listen 80;
    server_name api.monkids.site localhost;

    # Add CORS headers for development
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Referer' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Health check endpoint on HTTP
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'healthy';
    }

    # Allow direct HTTP access to API health check
    location = /api/health {
        proxy_pass http://backend:8000/api/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    server_name api.monkids.site;

    # SSL configuration with error handling
    ssl_certificate /etc/letsencrypt/live/api.monkids.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.monkids.site/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Add error handling for SSL certificate issues
    error_page 495 496 497 = @ssl_error;
    location @ssl_error {
        return 301 http://$host$request_uri;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # CORS headers for all locations
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Referer' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Increase timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Error logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined;

    # API endpoints
    location /api/ {
        proxy_pass http://backend:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Vary' 'Origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Referer';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Error handling
        proxy_intercept_errors on;
        error_page 404 = @error404;
        error_page 500 502 503 504 = @error50x;
    }

    # Error pages
    location @error404 {
        return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
    }

    location @error50x {
        return 500 '{"error": "Internal Server Error", "message": "Something went wrong"}';
    }

    # Redirect all other requests to frontend
    location / {
        return 301 https://monkids.site$request_uri;
    }
}
